name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend .NET Tests
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests (.NET)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend
    
    - name: Build
      run: dotnet build --no-restore
      working-directory: ./backend
    
    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
      working-directory: ./backend
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/TestResults
        flags: backend

  # Python Analytics Tests
  python-tests:
    runs-on: ubuntu-latest
    name: Python Analytics Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      working-directory: ./analytics-engine
    
    - name: Run tests
      run: |
        pytest tests/ --cov=src --cov-report=xml
      working-directory: ./analytics-engine
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./analytics-engine
        flags: python

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests (React)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      working-directory: ./frontend
    
    - name: Build
      run: npm run build
      working-directory: ./frontend
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [backend-tests, python-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: data-analytics-frontend:test
    
    - name: Build Analytics Engine Image
      uses: docker/build-push-action@v5
      with:
        context: ./analytics-engine
        push: false
        tags: data-analytics-python:test

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
